import { Document } from 'mongoose';

export const classificationValues = ['biomÃ©dico', 'red de frio', 'equipo computo'] as const;
export const roleValues = ['admin', 'company', 'collaborator', 'client'] as const;
export type ClassificationProps = typeof classificationValues[number]
export type RoleProps = typeof roleValues[number]
export interface User extends Document {
  //to auth-firebase (password is handled by firebase)
  _id: string
  uid: string
  email: string
  fcmToken?: string
  //to user
  phone: string
  username: string
  //dependent role
  nit?: string
  invima?: string
  profesionalLicense?: string
  //access (role)
  role: RoleProps
  position: string
  inactive: boolean
  belongsTo?: User
  permissions?: string[] //access
  classification?: ClassificationProps[]
  metadata: Record<string, any> //to files
  inventory?: string
  createdAt?: Date
  updatedAt?: Date
}

/**
 * values obligatories
 * _id (ðŸŸ¢)  * username (ðŸŸ¢)  * inactive (ðŸŸ¢)
 * uid (ðŸŸ¢)  * phone (ðŸŸ¢)     * position (ðŸŸ¢)
 * role (ðŸŸ¢)

 * --------------------------------------------------------------------------------------------------------- *
 * client:                                company:                                                  collaborator:
 *  nit (ðŸŸ¢)                        <---   nit (ðŸŸ¢)                                          <---   nit (ðŸ”´)
 *  invima (ðŸ”´)                     <---   invima (ðŸŸ¢)                                       <---   invima (ðŸ”´)
 *  profesionalLicense (ðŸ”´)         <---   profesionalLicense (ðŸŸ¢)                           <---   profesionalLicense (ðŸ”´)
 *  
 *  belongsTo (ðŸ”´)                  <---   belongsTo (ï¿½)                                     <---   belongsTo (ðŸŸ¢)
 *  permissions (ðŸ”´)                <---   permissions (ðŸŸ¢)                                  <---   permissions (ðŸŸ¢) (select)
 *  classification (ðŸ”´)             <---   classification (ðŸŸ¢)                               <---   classification (ðŸŸ¢) (select)
 *  metadata: {logo: string} (ðŸŸ¢)   <---   metadata {logo: string, signature: string} (ðŸŸ¢)   <---   metadata: {logo: string} (ðŸ”´)
 * 
 * Admins have all permissions; dont have none (ðŸ”´)
 * --------------------------------------------------------------------------------------------------------- *
 * (ï¿½) = optional (nullable)
 * (select) = selected value
 * (ðŸ”´) = not applied
 * (ðŸŸ¢) = applied
 * 
 * company - belongsTo (ï¿½) =>
 * this field is used to assign a subcompany to a company parent
 * if(belongsTo) then company is a subcompany
 * else company is a company parent (main)
 */